// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/rossmerr/couchdb_go/models"
)

// BulkGetReader is a Reader for the BulkGet structure.
type BulkGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BulkGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBulkGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBulkGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBulkGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBulkGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewBulkGetUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBulkGetOK creates a BulkGetOK with default headers values
func NewBulkGetOK() *BulkGetOK {
	return &BulkGetOK{}
}

/* BulkGetOK describes a response with status code 200, with default header values.

Request completed successfully
*/
type BulkGetOK struct {
	Payload *models.Results
}

func (o *BulkGetOK) Error() string {
	return fmt.Sprintf("[POST /{db}/_bulk_get][%d] bulkGetOK  %+v", 200, o.Payload)
}
func (o *BulkGetOK) GetPayload() *models.Results {
	return o.Payload
}

func (o *BulkGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Results)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkGetBadRequest creates a BulkGetBadRequest with default headers values
func NewBulkGetBadRequest() *BulkGetBadRequest {
	return &BulkGetBadRequest{}
}

/* BulkGetBadRequest describes a response with status code 400, with default header values.

The request provided invalid JSON data or invalid query parameter
*/
type BulkGetBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *BulkGetBadRequest) Error() string {
	return fmt.Sprintf("[POST /{db}/_bulk_get][%d] bulkGetBadRequest  %+v", 400, o.Payload)
}
func (o *BulkGetBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BulkGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkGetUnauthorized creates a BulkGetUnauthorized with default headers values
func NewBulkGetUnauthorized() *BulkGetUnauthorized {
	return &BulkGetUnauthorized{}
}

/* BulkGetUnauthorized describes a response with status code 401, with default header values.

Read permission required
*/
type BulkGetUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *BulkGetUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{db}/_bulk_get][%d] bulkGetUnauthorized  %+v", 401, o.Payload)
}
func (o *BulkGetUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BulkGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkGetNotFound creates a BulkGetNotFound with default headers values
func NewBulkGetNotFound() *BulkGetNotFound {
	return &BulkGetNotFound{}
}

/* BulkGetNotFound describes a response with status code 404, with default header values.

Requested database not found
*/
type BulkGetNotFound struct {
	Payload *models.ErrorResponse
}

func (o *BulkGetNotFound) Error() string {
	return fmt.Sprintf("[POST /{db}/_bulk_get][%d] bulkGetNotFound  %+v", 404, o.Payload)
}
func (o *BulkGetNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BulkGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkGetUnsupportedMediaType creates a BulkGetUnsupportedMediaType with default headers values
func NewBulkGetUnsupportedMediaType() *BulkGetUnsupportedMediaType {
	return &BulkGetUnsupportedMediaType{}
}

/* BulkGetUnsupportedMediaType describes a response with status code 415, with default header values.

Bad Content-Type value
*/
type BulkGetUnsupportedMediaType struct {
	Payload *models.ErrorResponse
}

func (o *BulkGetUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /{db}/_bulk_get][%d] bulkGetUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *BulkGetUnsupportedMediaType) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BulkGetUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
