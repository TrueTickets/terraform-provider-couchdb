// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDbSecurityGetParams creates a new DbSecurityGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDbSecurityGetParams() *DbSecurityGetParams {
	return &DbSecurityGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDbSecurityGetParamsWithTimeout creates a new DbSecurityGetParams object
// with the ability to set a timeout on a request.
func NewDbSecurityGetParamsWithTimeout(timeout time.Duration) *DbSecurityGetParams {
	return &DbSecurityGetParams{
		timeout: timeout,
	}
}

// NewDbSecurityGetParamsWithContext creates a new DbSecurityGetParams object
// with the ability to set a context for a request.
func NewDbSecurityGetParamsWithContext(ctx context.Context) *DbSecurityGetParams {
	return &DbSecurityGetParams{
		Context: ctx,
	}
}

// NewDbSecurityGetParamsWithHTTPClient creates a new DbSecurityGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDbSecurityGetParamsWithHTTPClient(client *http.Client) *DbSecurityGetParams {
	return &DbSecurityGetParams{
		HTTPClient: client,
	}
}

/* DbSecurityGetParams contains all the parameters to send to the API endpoint
   for the db security get operation.

   Typically these are written to a http.Request.
*/
type DbSecurityGetParams struct {

	/* Db.

	   Database name
	*/
	Db string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the db security get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DbSecurityGetParams) WithDefaults() *DbSecurityGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the db security get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DbSecurityGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the db security get params
func (o *DbSecurityGetParams) WithTimeout(timeout time.Duration) *DbSecurityGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the db security get params
func (o *DbSecurityGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the db security get params
func (o *DbSecurityGetParams) WithContext(ctx context.Context) *DbSecurityGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the db security get params
func (o *DbSecurityGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the db security get params
func (o *DbSecurityGetParams) WithHTTPClient(client *http.Client) *DbSecurityGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the db security get params
func (o *DbSecurityGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDb adds the db to the db security get params
func (o *DbSecurityGetParams) WithDb(db string) *DbSecurityGetParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the db security get params
func (o *DbSecurityGetParams) SetDb(db string) {
	o.Db = db
}

// WriteToRequest writes these params to a swagger request
func (o *DbSecurityGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
