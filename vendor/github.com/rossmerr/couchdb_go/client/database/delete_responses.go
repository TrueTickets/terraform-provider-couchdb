// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/rossmerr/couchdb_go/models"
)

// DeleteReader is a Reader for the Delete structure.
type DeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewDeleteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteOK creates a DeleteOK with default headers values
func NewDeleteOK() *DeleteOK {
	return &DeleteOK{}
}

/* DeleteOK describes a response with status code 200, with default header values.

Database removed successfully (quorum is met and database is deleted by at least one node)
*/
type DeleteOK struct {
	Payload *models.OK
}

func (o *DeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] deleteOK  %+v", 200, o.Payload)
}
func (o *DeleteOK) GetPayload() *models.OK {
	return o.Payload
}

func (o *DeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OK)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAccepted creates a DeleteAccepted with default headers values
func NewDeleteAccepted() *DeleteAccepted {
	return &DeleteAccepted{}
}

/* DeleteAccepted describes a response with status code 202, with default header values.

Accepted (deleted by at least one of the nodes, quorum is not met yet)
*/
type DeleteAccepted struct {
	Payload *models.OK
}

func (o *DeleteAccepted) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] deleteAccepted  %+v", 202, o.Payload)
}
func (o *DeleteAccepted) GetPayload() *models.OK {
	return o.Payload
}

func (o *DeleteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OK)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBadRequest creates a DeleteBadRequest with default headers values
func NewDeleteBadRequest() *DeleteBadRequest {
	return &DeleteBadRequest{}
}

/* DeleteBadRequest describes a response with status code 400, with default header values.

Invalid database name or forgotten document id by accident
*/
type DeleteBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] deleteBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUnauthorized creates a DeleteUnauthorized with default headers values
func NewDeleteUnauthorized() *DeleteUnauthorized {
	return &DeleteUnauthorized{}
}

/* DeleteUnauthorized describes a response with status code 401, with default header values.

CouchDB Server Administrator privileges required
*/
type DeleteUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] deleteUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotFound creates a DeleteNotFound with default headers values
func NewDeleteNotFound() *DeleteNotFound {
	return &DeleteNotFound{}
}

/* DeleteNotFound describes a response with status code 404, with default header values.

Database doesnâ€™t exist or invalid database name
*/
type DeleteNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /{db}][%d] deleteNotFound  %+v", 404, o.Payload)
}
func (o *DeleteNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
