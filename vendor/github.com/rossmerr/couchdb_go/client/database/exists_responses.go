// Code generated by go-swagger; DO NOT EDIT.

package database

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/rossmerr/couchdb_go/models"
)

// ExistsReader is a Reader for the Exists structure.
type ExistsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExistsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExistsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewExistsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExistsOK creates a ExistsOK with default headers values
func NewExistsOK() *ExistsOK {
	return &ExistsOK{}
}

/* ExistsOK describes a response with status code 200, with default header values.

Database exists
*/
type ExistsOK struct {
}

func (o *ExistsOK) Error() string {
	return fmt.Sprintf("[HEAD /{db}][%d] existsOK ", 200)
}

func (o *ExistsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExistsNotFound creates a ExistsNotFound with default headers values
func NewExistsNotFound() *ExistsNotFound {
	return &ExistsNotFound{}
}

/* ExistsNotFound describes a response with status code 404, with default header values.

Requested database not found
*/
type ExistsNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ExistsNotFound) Error() string {
	return fmt.Sprintf("[HEAD /{db}][%d] existsNotFound  %+v", 404, o.Payload)
}
func (o *ExistsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ExistsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
