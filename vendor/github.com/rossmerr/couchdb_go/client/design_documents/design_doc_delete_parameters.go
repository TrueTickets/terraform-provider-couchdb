// Code generated by go-swagger; DO NOT EDIT.

package design_documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDesignDocDeleteParams creates a new DesignDocDeleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDesignDocDeleteParams() *DesignDocDeleteParams {
	return &DesignDocDeleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDesignDocDeleteParamsWithTimeout creates a new DesignDocDeleteParams object
// with the ability to set a timeout on a request.
func NewDesignDocDeleteParamsWithTimeout(timeout time.Duration) *DesignDocDeleteParams {
	return &DesignDocDeleteParams{
		timeout: timeout,
	}
}

// NewDesignDocDeleteParamsWithContext creates a new DesignDocDeleteParams object
// with the ability to set a context for a request.
func NewDesignDocDeleteParamsWithContext(ctx context.Context) *DesignDocDeleteParams {
	return &DesignDocDeleteParams{
		Context: ctx,
	}
}

// NewDesignDocDeleteParamsWithHTTPClient creates a new DesignDocDeleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewDesignDocDeleteParamsWithHTTPClient(client *http.Client) *DesignDocDeleteParams {
	return &DesignDocDeleteParams{
		HTTPClient: client,
	}
}

/* DesignDocDeleteParams contains all the parameters to send to the API endpoint
   for the design doc delete operation.

   Typically these are written to a http.Request.
*/
type DesignDocDeleteParams struct {

	/* IfMatch.

	   Document’s revision. Alternative to rev query parameter
	*/
	IfMatch *string

	/* Batch.

	   Stores document in batch mode Possible values: ok. Optional

	*/
	Batch *string

	/* Db.

	   Database name
	*/
	Db string

	/* Ddoc.

	   Design document id
	*/
	Ddoc string

	/* Rev.

	   Actual document’s revision
	*/
	Rev *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the design doc delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DesignDocDeleteParams) WithDefaults() *DesignDocDeleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the design doc delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DesignDocDeleteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the design doc delete params
func (o *DesignDocDeleteParams) WithTimeout(timeout time.Duration) *DesignDocDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the design doc delete params
func (o *DesignDocDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the design doc delete params
func (o *DesignDocDeleteParams) WithContext(ctx context.Context) *DesignDocDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the design doc delete params
func (o *DesignDocDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the design doc delete params
func (o *DesignDocDeleteParams) WithHTTPClient(client *http.Client) *DesignDocDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the design doc delete params
func (o *DesignDocDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the design doc delete params
func (o *DesignDocDeleteParams) WithIfMatch(ifMatch *string) *DesignDocDeleteParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the design doc delete params
func (o *DesignDocDeleteParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithBatch adds the batch to the design doc delete params
func (o *DesignDocDeleteParams) WithBatch(batch *string) *DesignDocDeleteParams {
	o.SetBatch(batch)
	return o
}

// SetBatch adds the batch to the design doc delete params
func (o *DesignDocDeleteParams) SetBatch(batch *string) {
	o.Batch = batch
}

// WithDb adds the db to the design doc delete params
func (o *DesignDocDeleteParams) WithDb(db string) *DesignDocDeleteParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the design doc delete params
func (o *DesignDocDeleteParams) SetDb(db string) {
	o.Db = db
}

// WithDdoc adds the ddoc to the design doc delete params
func (o *DesignDocDeleteParams) WithDdoc(ddoc string) *DesignDocDeleteParams {
	o.SetDdoc(ddoc)
	return o
}

// SetDdoc adds the ddoc to the design doc delete params
func (o *DesignDocDeleteParams) SetDdoc(ddoc string) {
	o.Ddoc = ddoc
}

// WithRev adds the rev to the design doc delete params
func (o *DesignDocDeleteParams) WithRev(rev *string) *DesignDocDeleteParams {
	o.SetRev(rev)
	return o
}

// SetRev adds the rev to the design doc delete params
func (o *DesignDocDeleteParams) SetRev(rev *string) {
	o.Rev = rev
}

// WriteToRequest writes these params to a swagger request
func (o *DesignDocDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param If-Match
		if err := r.SetHeaderParam("If-Match", *o.IfMatch); err != nil {
			return err
		}
	}

	if o.Batch != nil {

		// query param batch
		var qrBatch string

		if o.Batch != nil {
			qrBatch = *o.Batch
		}
		qBatch := qrBatch
		if qBatch != "" {

			if err := r.SetQueryParam("batch", qBatch); err != nil {
				return err
			}
		}
	}

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	// path param ddoc
	if err := r.SetPathParam("ddoc", o.Ddoc); err != nil {
		return err
	}

	if o.Rev != nil {

		// query param rev
		var qrRev string

		if o.Rev != nil {
			qrRev = *o.Rev
		}
		qRev := qrRev
		if qRev != "" {

			if err := r.SetQueryParam("rev", qRev); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
