// Code generated by go-swagger; DO NOT EDIT.

package partition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPartitionInfoParams creates a new PartitionInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPartitionInfoParams() *PartitionInfoParams {
	return &PartitionInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPartitionInfoParamsWithTimeout creates a new PartitionInfoParams object
// with the ability to set a timeout on a request.
func NewPartitionInfoParamsWithTimeout(timeout time.Duration) *PartitionInfoParams {
	return &PartitionInfoParams{
		timeout: timeout,
	}
}

// NewPartitionInfoParamsWithContext creates a new PartitionInfoParams object
// with the ability to set a context for a request.
func NewPartitionInfoParamsWithContext(ctx context.Context) *PartitionInfoParams {
	return &PartitionInfoParams{
		Context: ctx,
	}
}

// NewPartitionInfoParamsWithHTTPClient creates a new PartitionInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewPartitionInfoParamsWithHTTPClient(client *http.Client) *PartitionInfoParams {
	return &PartitionInfoParams{
		HTTPClient: client,
	}
}

/* PartitionInfoParams contains all the parameters to send to the API endpoint
   for the partition info operation.

   Typically these are written to a http.Request.
*/
type PartitionInfoParams struct {

	/* Db.

	   Database name
	*/
	Db string

	/* Partition.

	   Partition name
	*/
	Partition string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the partition info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartitionInfoParams) WithDefaults() *PartitionInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the partition info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartitionInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the partition info params
func (o *PartitionInfoParams) WithTimeout(timeout time.Duration) *PartitionInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the partition info params
func (o *PartitionInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the partition info params
func (o *PartitionInfoParams) WithContext(ctx context.Context) *PartitionInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the partition info params
func (o *PartitionInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the partition info params
func (o *PartitionInfoParams) WithHTTPClient(client *http.Client) *PartitionInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the partition info params
func (o *PartitionInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDb adds the db to the partition info params
func (o *PartitionInfoParams) WithDb(db string) *PartitionInfoParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the partition info params
func (o *PartitionInfoParams) SetDb(db string) {
	o.Db = db
}

// WithPartition adds the partition to the partition info params
func (o *PartitionInfoParams) WithPartition(partition string) *PartitionInfoParams {
	o.SetPartition(partition)
	return o
}

// SetPartition adds the partition to the partition info params
func (o *PartitionInfoParams) SetPartition(partition string) {
	o.Partition = partition
}

// WriteToRequest writes these params to a swagger request
func (o *PartitionInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	// path param partition
	if err := r.SetPathParam("partition", o.Partition); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
