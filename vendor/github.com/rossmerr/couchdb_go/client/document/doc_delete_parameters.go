// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDocDeleteParams creates a new DocDeleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDocDeleteParams() *DocDeleteParams {
	return &DocDeleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDocDeleteParamsWithTimeout creates a new DocDeleteParams object
// with the ability to set a timeout on a request.
func NewDocDeleteParamsWithTimeout(timeout time.Duration) *DocDeleteParams {
	return &DocDeleteParams{
		timeout: timeout,
	}
}

// NewDocDeleteParamsWithContext creates a new DocDeleteParams object
// with the ability to set a context for a request.
func NewDocDeleteParamsWithContext(ctx context.Context) *DocDeleteParams {
	return &DocDeleteParams{
		Context: ctx,
	}
}

// NewDocDeleteParamsWithHTTPClient creates a new DocDeleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewDocDeleteParamsWithHTTPClient(client *http.Client) *DocDeleteParams {
	return &DocDeleteParams{
		HTTPClient: client,
	}
}

/* DocDeleteParams contains all the parameters to send to the API endpoint
   for the doc delete operation.

   Typically these are written to a http.Request.
*/
type DocDeleteParams struct {

	/* IfMatch.

	   Document’s revision. Alternative to rev query parameter
	*/
	IfMatch *string

	/* Batch.

	   Stores document in batch mode Possible values: ok. Optional

	*/
	Batch *string

	/* Db.

	   Database name
	*/
	Db string

	/* Docid.

	   DDocument ID
	*/
	Docid string

	/* Rev.

	   Actual document’s revision
	*/
	Rev *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the doc delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DocDeleteParams) WithDefaults() *DocDeleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the doc delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DocDeleteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the doc delete params
func (o *DocDeleteParams) WithTimeout(timeout time.Duration) *DocDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the doc delete params
func (o *DocDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the doc delete params
func (o *DocDeleteParams) WithContext(ctx context.Context) *DocDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the doc delete params
func (o *DocDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the doc delete params
func (o *DocDeleteParams) WithHTTPClient(client *http.Client) *DocDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the doc delete params
func (o *DocDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the doc delete params
func (o *DocDeleteParams) WithIfMatch(ifMatch *string) *DocDeleteParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the doc delete params
func (o *DocDeleteParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithBatch adds the batch to the doc delete params
func (o *DocDeleteParams) WithBatch(batch *string) *DocDeleteParams {
	o.SetBatch(batch)
	return o
}

// SetBatch adds the batch to the doc delete params
func (o *DocDeleteParams) SetBatch(batch *string) {
	o.Batch = batch
}

// WithDb adds the db to the doc delete params
func (o *DocDeleteParams) WithDb(db string) *DocDeleteParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the doc delete params
func (o *DocDeleteParams) SetDb(db string) {
	o.Db = db
}

// WithDocid adds the docid to the doc delete params
func (o *DocDeleteParams) WithDocid(docid string) *DocDeleteParams {
	o.SetDocid(docid)
	return o
}

// SetDocid adds the docid to the doc delete params
func (o *DocDeleteParams) SetDocid(docid string) {
	o.Docid = docid
}

// WithRev adds the rev to the doc delete params
func (o *DocDeleteParams) WithRev(rev *string) *DocDeleteParams {
	o.SetRev(rev)
	return o
}

// SetRev adds the rev to the doc delete params
func (o *DocDeleteParams) SetRev(rev *string) {
	o.Rev = rev
}

// WriteToRequest writes these params to a swagger request
func (o *DocDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param If-Match
		if err := r.SetHeaderParam("If-Match", *o.IfMatch); err != nil {
			return err
		}
	}

	if o.Batch != nil {

		// query param batch
		var qrBatch string

		if o.Batch != nil {
			qrBatch = *o.Batch
		}
		qBatch := qrBatch
		if qBatch != "" {

			if err := r.SetQueryParam("batch", qBatch); err != nil {
				return err
			}
		}
	}

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	// path param docid
	if err := r.SetPathParam("docid", o.Docid); err != nil {
		return err
	}

	if o.Rev != nil {

		// query param rev
		var qrRev string

		if o.Rev != nil {
			qrRev = *o.Rev
		}
		qRev := qrRev
		if qRev != "" {

			if err := r.SetQueryParam("rev", qRev); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
