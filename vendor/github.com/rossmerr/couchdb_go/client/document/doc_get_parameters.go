// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDocGetParams creates a new DocGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDocGetParams() *DocGetParams {
	return &DocGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDocGetParamsWithTimeout creates a new DocGetParams object
// with the ability to set a timeout on a request.
func NewDocGetParamsWithTimeout(timeout time.Duration) *DocGetParams {
	return &DocGetParams{
		timeout: timeout,
	}
}

// NewDocGetParamsWithContext creates a new DocGetParams object
// with the ability to set a context for a request.
func NewDocGetParamsWithContext(ctx context.Context) *DocGetParams {
	return &DocGetParams{
		Context: ctx,
	}
}

// NewDocGetParamsWithHTTPClient creates a new DocGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDocGetParamsWithHTTPClient(client *http.Client) *DocGetParams {
	return &DocGetParams{
		HTTPClient: client,
	}
}

/* DocGetParams contains all the parameters to send to the API endpoint
   for the doc get operation.

   Typically these are written to a http.Request.
*/
type DocGetParams struct {

	/* IfNoneMatch.

	   Double quoted document’s revision token
	*/
	IfNoneMatch string

	/* AttEncodingInfo.

	   Includes encoding information in attachment stubs if the particular attachment is compressed. Default is false.
	*/
	AttEncodingInfo *bool

	/* Attachments.

	   Includes attachments bodies in response. Default is false
	*/
	Attachments *bool

	/* AttsSince.

	   Includes attachments only since specified revisions. Doesn’t includes attachments for specified revisions. Optional
	*/
	AttsSince []string

	/* Conflicts.

	   Includes information about conflicts in document. Default is false
	*/
	Conflicts *bool

	/* Db.

	   Database name
	*/
	Db string

	/* DeletedConflicts.

	   Includes information about deleted conflicted revisions. Default is false
	*/
	DeletedConflicts *bool

	/* Docid.

	   DDocument ID
	*/
	Docid string

	/* Latest.

	   Forces retrieving latest “leaf” revision, no matter what rev was requested. Default is false
	*/
	Latest *bool

	/* LocalSeq.

	   Includes last update sequence for the document. Default is false
	*/
	LocalSeq *bool

	/* Meta.

	   Acts same as specifying all conflicts, deleted_conflicts and revs_info query parameters. Default is false
	*/
	Meta *bool

	/* OpenRevs.

	   Retrieves documents of specified leaf revisions. Additionally, it accepts value as all to return all leaf revisions. Optional
	*/
	OpenRevs []string

	/* Rev.

	   Retrieves document of specified revision. Optional
	*/
	Rev *string

	/* Revs.

	   Includes list of all known document revisions. Default is false
	*/
	Revs *bool

	/* RevsInfo.

	   Includes detailed information for all known document revisions. Default is false
	*/
	RevsInfo *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the doc get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DocGetParams) WithDefaults() *DocGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the doc get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DocGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the doc get params
func (o *DocGetParams) WithTimeout(timeout time.Duration) *DocGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the doc get params
func (o *DocGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the doc get params
func (o *DocGetParams) WithContext(ctx context.Context) *DocGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the doc get params
func (o *DocGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the doc get params
func (o *DocGetParams) WithHTTPClient(client *http.Client) *DocGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the doc get params
func (o *DocGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfNoneMatch adds the ifNoneMatch to the doc get params
func (o *DocGetParams) WithIfNoneMatch(ifNoneMatch string) *DocGetParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the doc get params
func (o *DocGetParams) SetIfNoneMatch(ifNoneMatch string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithAttEncodingInfo adds the attEncodingInfo to the doc get params
func (o *DocGetParams) WithAttEncodingInfo(attEncodingInfo *bool) *DocGetParams {
	o.SetAttEncodingInfo(attEncodingInfo)
	return o
}

// SetAttEncodingInfo adds the attEncodingInfo to the doc get params
func (o *DocGetParams) SetAttEncodingInfo(attEncodingInfo *bool) {
	o.AttEncodingInfo = attEncodingInfo
}

// WithAttachments adds the attachments to the doc get params
func (o *DocGetParams) WithAttachments(attachments *bool) *DocGetParams {
	o.SetAttachments(attachments)
	return o
}

// SetAttachments adds the attachments to the doc get params
func (o *DocGetParams) SetAttachments(attachments *bool) {
	o.Attachments = attachments
}

// WithAttsSince adds the attsSince to the doc get params
func (o *DocGetParams) WithAttsSince(attsSince []string) *DocGetParams {
	o.SetAttsSince(attsSince)
	return o
}

// SetAttsSince adds the attsSince to the doc get params
func (o *DocGetParams) SetAttsSince(attsSince []string) {
	o.AttsSince = attsSince
}

// WithConflicts adds the conflicts to the doc get params
func (o *DocGetParams) WithConflicts(conflicts *bool) *DocGetParams {
	o.SetConflicts(conflicts)
	return o
}

// SetConflicts adds the conflicts to the doc get params
func (o *DocGetParams) SetConflicts(conflicts *bool) {
	o.Conflicts = conflicts
}

// WithDb adds the db to the doc get params
func (o *DocGetParams) WithDb(db string) *DocGetParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the doc get params
func (o *DocGetParams) SetDb(db string) {
	o.Db = db
}

// WithDeletedConflicts adds the deletedConflicts to the doc get params
func (o *DocGetParams) WithDeletedConflicts(deletedConflicts *bool) *DocGetParams {
	o.SetDeletedConflicts(deletedConflicts)
	return o
}

// SetDeletedConflicts adds the deletedConflicts to the doc get params
func (o *DocGetParams) SetDeletedConflicts(deletedConflicts *bool) {
	o.DeletedConflicts = deletedConflicts
}

// WithDocid adds the docid to the doc get params
func (o *DocGetParams) WithDocid(docid string) *DocGetParams {
	o.SetDocid(docid)
	return o
}

// SetDocid adds the docid to the doc get params
func (o *DocGetParams) SetDocid(docid string) {
	o.Docid = docid
}

// WithLatest adds the latest to the doc get params
func (o *DocGetParams) WithLatest(latest *bool) *DocGetParams {
	o.SetLatest(latest)
	return o
}

// SetLatest adds the latest to the doc get params
func (o *DocGetParams) SetLatest(latest *bool) {
	o.Latest = latest
}

// WithLocalSeq adds the localSeq to the doc get params
func (o *DocGetParams) WithLocalSeq(localSeq *bool) *DocGetParams {
	o.SetLocalSeq(localSeq)
	return o
}

// SetLocalSeq adds the localSeq to the doc get params
func (o *DocGetParams) SetLocalSeq(localSeq *bool) {
	o.LocalSeq = localSeq
}

// WithMeta adds the meta to the doc get params
func (o *DocGetParams) WithMeta(meta *bool) *DocGetParams {
	o.SetMeta(meta)
	return o
}

// SetMeta adds the meta to the doc get params
func (o *DocGetParams) SetMeta(meta *bool) {
	o.Meta = meta
}

// WithOpenRevs adds the openRevs to the doc get params
func (o *DocGetParams) WithOpenRevs(openRevs []string) *DocGetParams {
	o.SetOpenRevs(openRevs)
	return o
}

// SetOpenRevs adds the openRevs to the doc get params
func (o *DocGetParams) SetOpenRevs(openRevs []string) {
	o.OpenRevs = openRevs
}

// WithRev adds the rev to the doc get params
func (o *DocGetParams) WithRev(rev *string) *DocGetParams {
	o.SetRev(rev)
	return o
}

// SetRev adds the rev to the doc get params
func (o *DocGetParams) SetRev(rev *string) {
	o.Rev = rev
}

// WithRevs adds the revs to the doc get params
func (o *DocGetParams) WithRevs(revs *bool) *DocGetParams {
	o.SetRevs(revs)
	return o
}

// SetRevs adds the revs to the doc get params
func (o *DocGetParams) SetRevs(revs *bool) {
	o.Revs = revs
}

// WithRevsInfo adds the revsInfo to the doc get params
func (o *DocGetParams) WithRevsInfo(revsInfo *bool) *DocGetParams {
	o.SetRevsInfo(revsInfo)
	return o
}

// SetRevsInfo adds the revsInfo to the doc get params
func (o *DocGetParams) SetRevsInfo(revsInfo *bool) {
	o.RevsInfo = revsInfo
}

// WriteToRequest writes these params to a swagger request
func (o *DocGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param If-None-Match
	if err := r.SetHeaderParam("If-None-Match", o.IfNoneMatch); err != nil {
		return err
	}

	if o.AttEncodingInfo != nil {

		// query param att_encoding_info
		var qrAttEncodingInfo bool

		if o.AttEncodingInfo != nil {
			qrAttEncodingInfo = *o.AttEncodingInfo
		}
		qAttEncodingInfo := swag.FormatBool(qrAttEncodingInfo)
		if qAttEncodingInfo != "" {

			if err := r.SetQueryParam("att_encoding_info", qAttEncodingInfo); err != nil {
				return err
			}
		}
	}

	if o.Attachments != nil {

		// query param attachments
		var qrAttachments bool

		if o.Attachments != nil {
			qrAttachments = *o.Attachments
		}
		qAttachments := swag.FormatBool(qrAttachments)
		if qAttachments != "" {

			if err := r.SetQueryParam("attachments", qAttachments); err != nil {
				return err
			}
		}
	}

	if o.AttsSince != nil {

		// binding items for atts_since
		joinedAttsSince := o.bindParamAttsSince(reg)

		// query array param atts_since
		if err := r.SetQueryParam("atts_since", joinedAttsSince...); err != nil {
			return err
		}
	}

	if o.Conflicts != nil {

		// query param conflicts
		var qrConflicts bool

		if o.Conflicts != nil {
			qrConflicts = *o.Conflicts
		}
		qConflicts := swag.FormatBool(qrConflicts)
		if qConflicts != "" {

			if err := r.SetQueryParam("conflicts", qConflicts); err != nil {
				return err
			}
		}
	}

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	if o.DeletedConflicts != nil {

		// query param deleted_conflicts
		var qrDeletedConflicts bool

		if o.DeletedConflicts != nil {
			qrDeletedConflicts = *o.DeletedConflicts
		}
		qDeletedConflicts := swag.FormatBool(qrDeletedConflicts)
		if qDeletedConflicts != "" {

			if err := r.SetQueryParam("deleted_conflicts", qDeletedConflicts); err != nil {
				return err
			}
		}
	}

	// path param docid
	if err := r.SetPathParam("docid", o.Docid); err != nil {
		return err
	}

	if o.Latest != nil {

		// query param latest
		var qrLatest bool

		if o.Latest != nil {
			qrLatest = *o.Latest
		}
		qLatest := swag.FormatBool(qrLatest)
		if qLatest != "" {

			if err := r.SetQueryParam("latest", qLatest); err != nil {
				return err
			}
		}
	}

	if o.LocalSeq != nil {

		// query param local_seq
		var qrLocalSeq bool

		if o.LocalSeq != nil {
			qrLocalSeq = *o.LocalSeq
		}
		qLocalSeq := swag.FormatBool(qrLocalSeq)
		if qLocalSeq != "" {

			if err := r.SetQueryParam("local_seq", qLocalSeq); err != nil {
				return err
			}
		}
	}

	if o.Meta != nil {

		// query param meta
		var qrMeta bool

		if o.Meta != nil {
			qrMeta = *o.Meta
		}
		qMeta := swag.FormatBool(qrMeta)
		if qMeta != "" {

			if err := r.SetQueryParam("meta", qMeta); err != nil {
				return err
			}
		}
	}

	if o.OpenRevs != nil {

		// binding items for open_revs
		joinedOpenRevs := o.bindParamOpenRevs(reg)

		// query array param open_revs
		if err := r.SetQueryParam("open_revs", joinedOpenRevs...); err != nil {
			return err
		}
	}

	if o.Rev != nil {

		// query param rev
		var qrRev string

		if o.Rev != nil {
			qrRev = *o.Rev
		}
		qRev := qrRev
		if qRev != "" {

			if err := r.SetQueryParam("rev", qRev); err != nil {
				return err
			}
		}
	}

	if o.Revs != nil {

		// query param revs
		var qrRevs bool

		if o.Revs != nil {
			qrRevs = *o.Revs
		}
		qRevs := swag.FormatBool(qrRevs)
		if qRevs != "" {

			if err := r.SetQueryParam("revs", qRevs); err != nil {
				return err
			}
		}
	}

	if o.RevsInfo != nil {

		// query param revs_info
		var qrRevsInfo bool

		if o.RevsInfo != nil {
			qrRevsInfo = *o.RevsInfo
		}
		qRevsInfo := swag.FormatBool(qrRevsInfo)
		if qRevsInfo != "" {

			if err := r.SetQueryParam("revs_info", qRevsInfo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDocGet binds the parameter atts_since
func (o *DocGetParams) bindParamAttsSince(formats strfmt.Registry) []string {
	attsSinceIR := o.AttsSince

	var attsSinceIC []string
	for _, attsSinceIIR := range attsSinceIR { // explode []string

		attsSinceIIV := attsSinceIIR // string as string
		attsSinceIC = append(attsSinceIC, attsSinceIIV)
	}

	// items.CollectionFormat: "multi"
	attsSinceIS := swag.JoinByFormat(attsSinceIC, "multi")

	return attsSinceIS
}

// bindParamDocGet binds the parameter open_revs
func (o *DocGetParams) bindParamOpenRevs(formats strfmt.Registry) []string {
	openRevsIR := o.OpenRevs

	var openRevsIC []string
	for _, openRevsIIR := range openRevsIR { // explode []string

		openRevsIIV := openRevsIIR // string as string
		openRevsIC = append(openRevsIC, openRevsIIV)
	}

	// items.CollectionFormat: "multi"
	openRevsIS := swag.JoinByFormat(openRevsIC, "multi")

	return openRevsIS
}
