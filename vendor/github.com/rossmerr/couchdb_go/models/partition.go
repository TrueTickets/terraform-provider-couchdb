// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Partition partition
//
// swagger:model Partition
type Partition struct {

	// db name
	DbName string `json:"db_name,omitempty"`

	// doc count
	DocCount int64 `json:"doc_count,omitempty"`

	// doc del count
	DocDelCount int64 `json:"doc_del_count,omitempty"`

	// partition
	Partition string `json:"partition,omitempty"`

	// sizes
	Sizes *PartitionSizes `json:"sizes,omitempty"`
}

// Validate validates this partition
func (m *Partition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSizes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Partition) validateSizes(formats strfmt.Registry) error {
	if swag.IsZero(m.Sizes) { // not required
		return nil
	}

	if m.Sizes != nil {
		if err := m.Sizes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sizes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this partition based on the context it is used
func (m *Partition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSizes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Partition) contextValidateSizes(ctx context.Context, formats strfmt.Registry) error {

	if m.Sizes != nil {
		if err := m.Sizes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sizes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Partition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Partition) UnmarshalBinary(b []byte) error {
	var res Partition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
