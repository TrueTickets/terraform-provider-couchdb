// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Database database
//
// swagger:model Database
type Database struct {

	// cluster
	Cluster *DatabaseCluster `json:"cluster,omitempty"`

	// Set to true if the database compaction routine is operating on this database.
	CompactRunning bool `json:"compact_running,omitempty"`

	// The name of the database.
	DbName string `json:"db_name,omitempty"`

	// The version of the physical format used for the data when it is stored on disk.
	DiskFormatVersion int64 `json:"disk_format_version,omitempty"`

	// A count of the documents in the specified database.
	DocCount int64 `json:"doc_count,omitempty"`

	// Number of deleted documents
	DocDelCount int64 `json:"doc_del_count,omitempty"`

	// Always "0". (Returned for legacy reasons.)
	InstanceStartTime string `json:"instance_start_time,omitempty"`

	// props
	Props *DatabaseProps `json:"props,omitempty"`

	// An opaque string that describes the purge state of the database. Do not rely on this string for counting the number of purge operations.
	PurgeSeq string `json:"purge_seq,omitempty"`

	// sizes
	Sizes *DatabaseSizes `json:"sizes,omitempty"`

	// Always "0". (Returned for legacy reasons.)
	UpdateSeq string `json:"update_seq,omitempty"`
}

// Validate validates this database
func (m *Database) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Database) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Database) validateProps(formats strfmt.Registry) error {
	if swag.IsZero(m.Props) { // not required
		return nil
	}

	if m.Props != nil {
		if err := m.Props.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("props")
			}
			return err
		}
	}

	return nil
}

func (m *Database) validateSizes(formats strfmt.Registry) error {
	if swag.IsZero(m.Sizes) { // not required
		return nil
	}

	if m.Sizes != nil {
		if err := m.Sizes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sizes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this database based on the context it is used
func (m *Database) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSizes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Database) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Database) contextValidateProps(ctx context.Context, formats strfmt.Registry) error {

	if m.Props != nil {
		if err := m.Props.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("props")
			}
			return err
		}
	}

	return nil
}

func (m *Database) contextValidateSizes(ctx context.Context, formats strfmt.Registry) error {

	if m.Sizes != nil {
		if err := m.Sizes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sizes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Database) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Database) UnmarshalBinary(b []byte) error {
	var res Database
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
