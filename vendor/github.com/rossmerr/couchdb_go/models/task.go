// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Task task
//
// swagger:model Task
type Task struct {

	// Processed changes
	ChangesDone int64 `json:"changes_done,omitempty"`

	// Source database
	Database string `json:"database,omitempty"`

	// Process ID
	Pid string `json:"pid,omitempty"`

	// Current percentage progress
	Progress int64 `json:"progress,omitempty"`

	// ask start time as unix timestamp
	StartedOn int64 `json:"started_on,omitempty"`

	// Task status message
	Status string `json:"status,omitempty"`

	// Task name
	Task string `json:"task,omitempty"`

	// Total changes to process
	TotalChanges int64 `json:"total_changes,omitempty"`

	// Operation Type
	Type string `json:"type,omitempty"`

	// Unix timestamp of last operation update
	UpdatedOn string `json:"updated_on,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this task based on context it is used
func (m *Task) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
