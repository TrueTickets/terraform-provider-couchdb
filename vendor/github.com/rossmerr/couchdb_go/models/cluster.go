// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cluster cluster
//
// swagger:model Cluster
type Cluster struct {

	// action
	// Enum: [enable_single_node enable_cluster add_node finish_cluster]
	Action string `json:"action,omitempty"`

	// The IP address to which to bind the current node. The special value 0.0.0.0 may be specified to bind to all interfaces on the host. (enable_cluster and enable_single_node only)
	BindAddress string `json:"bind_address,omitempty"`

	// List of system databases to ensure exist on the node/cluster. Defaults to ["_users","_replicator"].
	EnsureDbsExist []string `json:"ensure_dbs_exist"`

	// The remote node IP of the node to add to the cluster. (add_node only)
	Host string `json:"host,omitempty"`

	// The total number of nodes to be joined into the cluster, including this one. Used to determine the value of the cluster’s n, up to a maximum of 3. (enable_cluster only)
	NodeCount int64 `json:"node_count,omitempty"`

	// The password for the server-level administrator to create. (enable_cluster and enable_single_node only), or the remote server’s administrator username (add_node)
	Password string `json:"password,omitempty"`

	// The TCP port to which to bind this node (enable_cluster and enable_single_node only) or the TCP port to which to bind a remote node (add_node only).
	Port int64 `json:"port,omitempty"`

	// he password of the server-level administrator authorized on the remote node. (enable_cluster only)
	RemoteCurrentPassword string `json:"remote_current_password,omitempty"`

	// The username of the server-level administrator authorized on the remote node. (enable_cluster only)
	RemoteCurrentUser string `json:"remote_current_user,omitempty"`

	// The IP address of the remote node to setup as part of this cluster’s list of nodes. (enable_cluster only)
	RemoteNode string `json:"remote_node,omitempty"`

	// The username of the server-level administrator to create. (enable_cluster and enable_single_node only), or the remote server’s administrator username (add_node)
	Username string `json:"username,omitempty"`
}

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enable_single_node","enable_cluster","add_node","finish_cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterTypeActionPropEnum = append(clusterTypeActionPropEnum, v)
	}
}

const (

	// ClusterActionEnableSingleNode captures enum value "enable_single_node"
	ClusterActionEnableSingleNode string = "enable_single_node"

	// ClusterActionEnableCluster captures enum value "enable_cluster"
	ClusterActionEnableCluster string = "enable_cluster"

	// ClusterActionAddNode captures enum value "add_node"
	ClusterActionAddNode string = "add_node"

	// ClusterActionFinishCluster captures enum value "finish_cluster"
	ClusterActionFinishCluster string = "finish_cluster"
)

// prop value enum
func (m *Cluster) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Cluster) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster based on context it is used
func (m *Cluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
